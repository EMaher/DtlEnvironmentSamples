{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "AdminUserName": {
      "type": "string",
      "minLength": 1
    },
    "AdminPassword": {
      "type": "securestring"
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Auto-generated container in staging storage account to receive post-build staging folder upload"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Auto-generated token to access _artifactsLocation"
      }
    }
  },
  "variables": {
    "AvailabilitySetName": "[take(concat('AvailSet-', uniqueString(resourceGroup().id)),80)]",
    "MachineVhdStorageAccount": "[take(concat('vhdstor', tolower(uniqueString(resourceGroup().id))),24)]",
    "VirtualNetworkName": "[take(concat('VNet-', uniqueString(resourceGroup().id)),24)]",
    "VirtualNetworkSubnet1Name": "[take(concat('VNet-Subnet1-', uniqueString(resourceGroup().id)),24)]",

    "ServerVirtualMachineName": "[take(concat('serv-', uniqueString(resourceGroup().id)), 15)]",
    "ServerVirtualMachineVnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]",
    "ServerVirtualMachineSubnetRef": "[concat(variables('ServerVirtualMachineVnetID'), '/subnets/', variables('VirtualNetworkSubnet1Name'))]",
    "ServerVirtualMachineNicName": "[take(concat('serv-nic-', uniqueString(resourceGroup().id)),80)]",
    "ServerPublicIpName": "[take(concat('serv-pip-', uniqueString(resourceGroup().id)),80)]",
    "ServerPublicIpDnsName": "[take(concat('serv', uniqueString(resourceGroup().id)), 15)]",

    "DomainControllerVirtualMachineName": "[take(concat('dc-', uniqueString(resourceGroup().id)), 15)]",
    "DomainControllerVirtualMachineVnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]",
    "DomainControllerMachineSubnetRef": "[concat(variables('ServerVirtualMachineVnetID'), '/subnets/', variables('VirtualNetworkSubnet1Name'))]",
    "DomainControllerVirtualMachineNicName": "[take(concat('dc-nic-', uniqueString(resourceGroup().id)),80)]",

    "ClientVirtualMachineName": "[take(concat('client-', uniqueString(resourceGroup().id)), 15)]",
    "ClientVirtualMachineVnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]",
    "ClientVirtualMachineSubnetRef": "[concat(variables('ServerVirtualMachineVnetID'), '/subnets/', variables('VirtualNetworkSubnet1Name'))]",
    "ClientVirtualMachineNicName": "[take(concat('client-nic-', uniqueString(resourceGroup().id)),80)]"

  },
  "resources": [
    {
      "name": "[variables('AvailabilitySetName')]",
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "AvailabilitySet"
      },
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 2
      }
    },
    {
      "name": "[variables('VirtualNetworkName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [],
      "tags": {
        "displayName": "VirtualNetwork"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('VirtualNetworkSubnet1Name')]",
            "properties": {
              "addressPrefix": "10.0.0.0/24"
            }
          },
          {
            "name": "[take(concat('VNet-Subnet2-', uniqueString(resourceGroup().id)),80)]",
            "properties": {
              "addressPrefix": "10.0.1.0/24"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('MachineVhdStorageAccount')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-01-01",
      "sku": {
        "name": "Standard_LRS"
      },
      "dependsOn": [],
      "tags": {
        "displayName": "MachineVhdStorage"
      },
      "kind": "Storage"
    },
    {
      "name": "[variables('DomainControllerVirtualMachineNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]"
      ],
      "tags": {
        "displayName": "DcNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('ServerVirtualMachineSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('DomainControllerVirtualMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('MachineVhdStorageAccount'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('DomainControllerVirtualMachineNicName'))]"
      ],
      "tags": {
        "displayName": "DcVm"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2_v2"
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('AvailabilitySetName'))]"
        },
        "osProfile": {
          "computerName": "[variables('DomainControllerVirtualMachineName')]",
          "adminUsername": "[parameters('AdminUserName')]",
          "adminPassword": "[parameters('AdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2012-R2-Datacenter",
            "version": "latest"
          },
          "osDisk": {
            "name": "ServerVirtualMachineOSDisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('MachineVhdStorageAccount')), '2016-01-01').primaryEndpoints.blob, 'vhds', '/', take(concat('dcosdisk', uniqueString(resourceGroup().id)), 24), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('DomainControllerVirtualMachineNicName'))]"
            }
          ]
        }
      }
    },
    {
      "name": "[variables('ServerPublicIpName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [],
      "tags": {
        "displayName": "serverpublicip"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('ServerPublicIpDnsName')]"
        }
      }
    },
    {
      "name": "[variables('ServerVirtualMachineNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('ServerPublicIpName'))]"
      ],
      "tags": {
        "displayName": "ServerVmNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('ServerVirtualMachineSubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('ServerPublicIpName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('ServerVirtualMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('MachineVhdStorageAccount'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('ServerVirtualMachineNicName'))]"
      ],
      "tags": {
        "displayName": "ServerVm"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_B2s"
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('AvailabilitySetName'))]"
        },
        "osProfile": {
          "computerName": "[variables('ServerVirtualMachineName')]",
          "adminUsername": "[parameters('AdminUserName')]",
          "adminPassword": "[parameters('AdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2016-Datacenter-smalldisk",
            "version": "latest"
          },
          "osDisk": {
            "name": "ServerVirtualMachineOSDisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('MachineVhdStorageAccount')), '2016-01-01').primaryEndpoints.blob, 'vhds', '/', take(concat('serverosdisk', uniqueString(resourceGroup().id)), 24), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('ServerVirtualMachineNicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "ServerConfigScripts",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2016-03-30",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', variables('ServerVirtualMachineName'))]"
          ],
          "tags": {
            "displayName": "ServerConfigScripts"
          },
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('_artifactsLocation'), '/CustomScripts/ServerConfigScripts.ps1', parameters('_artifactsLocationSasToken'))]"
              ],
              "commandToExecute": "where /r . ServerConfigScripts.ps1 | powershell -ExecutionPolicy Unrestricted"
            }
          }
        }
      ]
    },
    {
      "name": "[variables('ClientVirtualMachineNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VirtualNetworkName'))]"
      ],
      "tags": {
        "displayName": "ClientVmNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('ClientVirtualMachineSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('ClientVirtualMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('MachineVhdStorageAccount'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('ClientVirtualMachineNicName'))]"
      ],
      "tags": {
        "displayName": "ClientVm"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2_v2"
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('AvailabilitySetName'))]"
        },
        "osProfile": {
          "computerName": "[variables('ClientVirtualMachineName')]",
          "adminUsername": "[parameters('AdminUserName')]",
          "adminPassword": "[parameters('AdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2012-R2-Datacenter",
            "version": "latest"
          },
          "osDisk": {
            "name": "ClientVmOsDisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('MachineVhdStorageAccount')), '2016-01-01').primaryEndpoints.blob, 'vhds', '/', take(concat('cosdisk', uniqueString(resourceGroup().id)), 24), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('ClientVirtualMachineNicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "ClientConfigScripts",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2016-03-30",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', variables('ClientVirtualMachineName'))]"
          ],
          "tags": {
            "displayName": "ClientConfigScripts"
          },
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('_artifactsLocation'), '/CustomScripts/ClientConfigScripts.ps1', parameters('_artifactsLocationSasToken'))]"
              ],
              "commandToExecute": "where /r . ClientConfigScripts.ps1 | powershell -ExecutionPolicy Unrestricted"
            }
          }
        }
      ]
    }
  ],
  "outputs": {
  }
}
